/*
 * Copyright 2020 Zeppelin Bend Pty Ltd
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */


syntax = "proto3";
option java_multiple_files = true;
option java_package = "com.zepben.protobuf.np";
option csharp_namespace = "Zepben.Protobuf.NP";
package zepben.protobuf.np;

import "zepben/protobuf/cim/iec61968/assetinfo/CableInfo.proto";
import "zepben/protobuf/cim/iec61968/assetinfo/OverheadWireInfo.proto";
import "zepben/protobuf/cim/iec61968/assetinfo/PowerTransformerInfo.proto";
import "zepben/protobuf/cim/iec61968/assets/AssetInfo.proto";
import "zepben/protobuf/cim/iec61968/assets/AssetOwner.proto";
import "zepben/protobuf/cim/iec61968/assets/Pole.proto";
import "zepben/protobuf/cim/iec61968/assets/Streetlight.proto";
import "zepben/protobuf/cim/iec61968/common/Organisation.proto";
import "zepben/protobuf/cim/iec61968/common/Location.proto";
import "zepben/protobuf/cim/iec61968/customers/Customer.proto";
import "zepben/protobuf/cim/iec61968/metering/Meter.proto";
import "zepben/protobuf/cim/iec61968/metering/UsagePoint.proto";
import "zepben/protobuf/cim/iec61968/operations/OperationalRestriction.proto";
import "zepben/protobuf/cim/iec61970/base/auxiliaryequipment/FaultIndicator.proto";
import "zepben/protobuf/cim/iec61970/base/core/BaseVoltage.proto";
import "zepben/protobuf/cim/iec61970/base/core/ConnectivityNode.proto";
import "zepben/protobuf/cim/iec61970/base/core/Feeder.proto";
import "zepben/protobuf/cim/iec61970/base/core/GeographicalRegion.proto";
import "zepben/protobuf/cim/iec61970/base/core/Site.proto";
import "zepben/protobuf/cim/iec61970/base/core/SubGeographicalRegion.proto";
import "zepben/protobuf/cim/iec61970/base/core/Substation.proto";
import "zepben/protobuf/cim/iec61970/base/core/Terminal.proto";
import "zepben/protobuf/cim/iec61970/base/meas/Analog.proto";
import "zepben/protobuf/cim/iec61970/base/meas/Accumulator.proto";
import "zepben/protobuf/cim/iec61970/base/meas/Discrete.proto";
import "zepben/protobuf/cim/iec61970/base/wires/AcLineSegment.proto";
import "zepben/protobuf/cim/iec61970/base/wires/Breaker.proto";
import "zepben/protobuf/cim/iec61970/base/wires/Disconnector.proto";
import "zepben/protobuf/cim/iec61970/base/wires/EnergyConsumer.proto";
import "zepben/protobuf/cim/iec61970/base/wires/EnergyConsumerPhase.proto";
import "zepben/protobuf/cim/iec61970/base/wires/EnergySource.proto";
import "zepben/protobuf/cim/iec61970/base/wires/EnergySourcePhase.proto";
import "zepben/protobuf/cim/iec61970/base/wires/Fuse.proto";
import "zepben/protobuf/cim/iec61970/base/wires/Jumper.proto";
import "zepben/protobuf/cim/iec61970/base/wires/Junction.proto";
import "zepben/protobuf/cim/iec61970/base/wires/LinearShuntCompensator.proto";
import "zepben/protobuf/cim/iec61970/base/wires/PerLengthSequenceImpedance.proto";
import "zepben/protobuf/cim/iec61970/base/wires/PowerTransformer.proto";
import "zepben/protobuf/cim/iec61970/base/wires/PowerTransformerEnd.proto";
import "zepben/protobuf/cim/iec61970/base/wires/RatioTapChanger.proto";
import "zepben/protobuf/cim/iec61970/base/wires/Recloser.proto";
import "zepben/protobuf/cim/iec61970/infiec61970/feeder/Circuit.proto";
import "zepben/protobuf/cim/iec61970/infiec61970/feeder/Loop.proto";
import "zepben/protobuf/cim/iec61970/base/meas/Control.proto";
import "zepben/protobuf/cim/iec61970/base/scada/RemoteControl.proto";
import "zepben/protobuf/cim/iec61970/base/scada/RemoteSource.proto";
import "zepben/protobuf/cim/iec61970/base/wires/PowerElectronicsConnection.proto";
import "zepben/protobuf/cim/iec61970/base/wires/PowerElectronicsConnectionPhase.proto";
import "zepben/protobuf/cim/iec61970/base/wires/generation/production/BatteryUnit.proto";
import "zepben/protobuf/cim/iec61970/base/wires/generation/production/PhotoVoltaicUnit.proto";
import "zepben/protobuf/cim/iec61970/base/wires/generation/production/PowerElectronicsWindUnit.proto";


//
// NOTE: messageId is used for tracking messages through the system and detecting duplicates.
//

message CreateNetworkRequest {
    int64 messageId = 1;
}

message CompleteNetworkRequest {
    int64 messageId = 1;
}

message CreateCableInfoRequest {
    int64 messageId = 1;
    cim.iec61968.assetinfo.CableInfo cableInfo = 2;
}

message CreateOverheadWireInfoRequest {
    int64 messageId = 1;
    cim.iec61968.assetinfo.OverheadWireInfo overheadWireInfo = 2;
}

message CreatePowerTransformerInfoRequest {
    int64 messageId = 1;
    cim.iec61968.assetinfo.PowerTransformerInfo powerTransformerInfo = 2;
}

message CreateAssetInfoRequest {
    int64 messageId = 1;
    cim.iec61968.assets.AssetInfo assetInfo = 2;
}

message CreateAssetOwnerRequest {
    int64 messageId = 1;
    cim.iec61968.assets.AssetOwner assetOwner = 2;
}

message CreatePoleRequest {
    int64 messageId = 1;
    cim.iec61968.assets.Pole pole = 2;
}

message CreateStreetlightRequest {
    int64 messageId = 1;
    cim.iec61968.assets.Streetlight streetlight = 2;
}

message CreateLocationRequest {
    int64 messageId = 1;
    cim.iec61968.common.Location location = 2;
}

message CreateOrganisationRequest {
    int64 messageId = 1;
    cim.iec61968.common.Organisation organisation = 2;
}

message CreateCustomerRequest {
    int64 messageId = 1;
    cim.iec61968.customers.Customer customer = 2;
}

message CreateMeterRequest {
    int64 messageId = 1;
    cim.iec61968.metering.Meter meter = 2;
}

message CreateUsagePointRequest {
    int64 messageId = 1;
    cim.iec61968.metering.UsagePoint usagePoint = 2;
}

message CreateOperationalRestrictionRequest {
    int64 messageId = 1;
    cim.iec61968.operations.OperationalRestriction operationalRestriction = 2;
}

message CreateFaultIndicatorRequest {
    int64 messageId = 1;
    cim.iec61970.base.auxiliaryequipment.FaultIndicator faultIndicator = 2;
}

message CreateBaseVoltageRequest {
    int64 messageId = 1;
    cim.iec61970.base.core.BaseVoltage baseVoltage = 2;
}

message CreateConnectivityNodeRequest {
    int64 messageId = 1;
    cim.iec61970.base.core.ConnectivityNode connectivityNode = 2;
}

message CreateFeederRequest {
    int64 messageId = 1;
    cim.iec61970.base.core.Feeder feeder = 2;
}

message CreateGeographicalRegionRequest {
    int64 messageId = 1;
    cim.iec61970.base.core.GeographicalRegion geographicalRegion = 2;
}

message CreateSiteRequest {
    int64 messageId = 1;
    cim.iec61970.base.core.Site site = 2;
}

message CreateSubGeographicalRegionRequest {
    int64 messageId = 1;
    cim.iec61970.base.core.SubGeographicalRegion subGeographicalRegion = 2;
}

message CreateSubstationRequest {
    int64 messageId = 1;
    cim.iec61970.base.core.Substation substation = 2;
}

message CreateTerminalRequest {
    int64 messageId = 1;
    cim.iec61970.base.core.Terminal terminal = 2;
}

message CreateAccumulatorRequest {
    int64 messageId = 1;
    cim.iec61970.base.meas.Accumulator accumulator = 2;
}

message CreateAnalogRequest {
    int64 messageId = 1;
    cim.iec61970.base.meas.Analog analog = 2;
}

message CreateDiscreteRequest {
    int64 messageId = 1;
    cim.iec61970.base.meas.Discrete discrete = 2;
}

/**
 * For all ConductingEquipment, Terminals are sent alongside and must be ordered as per their sequenceNumber.
 * The server must always add Terminals to the Network prior to the ConductingEquipment.
 */
message CreateAcLineSegmentRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.AcLineSegment acLineSegment = 2;
}

message CreateBreakerRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.Breaker breaker = 2;
}

message CreateDisconnectorRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.Disconnector disconnector = 2;
}

message CreateEnergyConsumerRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.EnergyConsumer energyConsumer = 2;
}

message CreateEnergyConsumerPhaseRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.EnergyConsumerPhase energyConsumerPhase = 2;
}

message CreateEnergySourceRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.EnergySource energySource = 2;
}

message CreateEnergySourcePhaseRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.EnergySourcePhase energySourcePhase = 2;
}

message CreateFuseRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.Fuse fuse = 2;
}

message CreateJumperRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.Jumper jumper = 2;
}

message CreateJunctionRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.Junction junction = 2;
}

message CreateLinearShuntCompensatorRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.LinearShuntCompensator linearShuntCompensator = 2;
}

message CreatePerLengthSequenceImpedanceRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.PerLengthSequenceImpedance perLengthSequenceImpedance = 2;
}

/**
 * For all PowerTransformers, PowerTransformerEnds are sent alongside and must be ordered as per their endNumber.
 * The server must always add the PowerTransformerEnds to the Network prior to the PowerTransformer.
 */
message CreatePowerTransformerRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.PowerTransformer powerTransformer = 2;
}

message CreatePowerTransformerEndRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.PowerTransformerEnd powerTransformerEnd = 2;
}

message CreateRatioTapChangerRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.RatioTapChanger ratioTapChanger = 2;
}

message CreateRecloserRequest {
    int64 messageId = 1;
    cim.iec61970.base.wires.Recloser recloser = 2;
}

message CreateCircuitRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.infiec61970.feeder.Circuit circuit = 2;
}

message CreateLoopRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.infiec61970.feeder.Loop loop = 2;
}

message CreateControlRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.base.meas.Control control = 2;
}

message CreateRemoteControlRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.base.scada.RemoteControl remoteControl = 2;
}

message CreateRemoteSourceRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.base.scada.RemoteSource remoteSource = 2;
}

message CreatePowerElectronicsConnectionRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.base.wires.PowerElectronicsConnection powerElectronicsConnection = 2;
}

message CreatePowerElectronicsConnectionPhaseRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.base.wires.PowerElectronicsConnectionPhase powerElectronicsConnectionPhase = 2;
}

message CreateBatteryUnitRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.base.wires.generation.production.BatteryUnit batteryUnit = 2;
}

message CreatePhotoVoltaicRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.base.wires.generation.production.PhotoVoltaicUnit photoVoltaicUnit = 2;
}

message CreatePowerElectronicsWindUnitRequest {
    int64 messageId = 1;
    zepben.protobuf.cim.iec61970.base.wires.generation.production.PowerElectronicsWindUnit powerElectronicsWindUnits = 2;
}

